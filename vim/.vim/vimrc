" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Avoid side effects when it was already reset.
if &compatible
  set nocompatible
endif

" source it and redraw, when vimrc is written
augroup ReloadVimrc
  autocmd!
  " match symlink and target path
  autocmd BufWritePost $MYVIMRC,~/.dotfiles/vim/.vim/vimrc source $MYVIMRC | redraw! | echom "vimrc reloaded ..."
augroup END

" close some special buffer with q
augroup CloseWithQ
  autocmd!
  autocmd FileType help,netrw, nnoremap <buffer> q <cmd>close<cr>
augroup END

" -------------------------------------------------------
"  OPTIONS
" -------------------------------------------------------

set mouse=a             " Mouse support
set encoding=utf-8      " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.
set fileencodings=utf-8,latin1
set hidden

set noswapfile
" create undodir
call mkdir($HOME."/.vim/undo", "p", 0700)
set undodir=$HOME/.vim/undo " needs to exist
set undofile

set backspace=indent,eol,start	" Backspace all characters
set history=200         " keep 200 lines of command line history
set nostartofline       " Do not jump to first character with page commands
set scrolloff=8         " lines of context around the cursor

" CURSOR
let &t_SI.="\e[5 q"     " INSERT mode = blinking vertical bar
let &t_SR.="\e[4 q"     " REPLACE mode = solid underscore
let &t_EI.="\e[1 q"     " NORMAL mode (ELSE) = blinking block

" STYLE
set background=dark
set termguicolors
set laststatus=2
set nonumber
set norelativenumber
set signcolumn=auto

set listchars+=tab:→\ ,
set listchars+=space:·,
set listchars+=lead:·,
set listchars+=trail:·,
set listchars+=precedes:←,
set listchars+=extends:→,
set listchars+=nbsp:␣,
set listchars+=eol:↲,

set ruler               " show the cursor position all the time
set showmatch           " Show matching brackets.
set showmode            " Show the current mode in status line
set showcmd             " display incomplete commands

set splitright
set splitbelow

" INDENT
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nowrap
set textwidth=80

" SEARCH

set wildmenu
set wildmode=list:full
" WARNING: this option breakes NETRW in Termux
" set wildignorecase
set wildignore=node_modules/**,.git/**
set ignorecase
set smartcase
set hlsearch
set showmatch

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" -------------------------------------------------------
"  STATUS LINE
" -------------------------------------------------------

"function! InsertStatuslineColor(mode)
"  if a:mode == 'i'
"    hi statusline ctermfg=6 ctermbg=0
"  elseif a:mode == 'r'
"    hi statusline ctermfg=5 ctermbg=0
"  else
"    hi statusline ctermfg=1 ctermbg=0
"  endif
"endfunction
"
"au InsertEnter * call InsertStatuslineColor(v:insertmode)
"au InsertLeave * hi statusline ctermfg=8 ctermbg=0
"
"" default the statusline when entering Vim
"hi statusline ctermfg=8 ctermbg=0
"
"" hl-user
"hi User1 ctermfg=8  ctermbg=234

" STATUS
set statusline=%0*                " hl-user
let mybuflisted = {'buflisted':1}
set statusline+=[%n\/\%{len(getbufinfo(mybuflisted))}] " buffer
set statusline+=\ %f\             " file name
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}]           " file format
set statusline+=%y                " filetype
set statusline+=%h                " help file flag
set statusline+=%m                " modified flag
set statusline+=%r                " read only flag
set statusline+=\ %=              " align left
"set statusline+=%1*               " hl-user
set statusline+=\ C:%c            " current column
set statusline+=\ L:%l/%L\ [%p%%] " line X of Y [%]

" -------------------------------------------------------
"  COLORS & THEMES
" -------------------------------------------------------

" sainnhe/everforest
"colorscheme everforest
"let g:everforest_transparent_background = 2
"hi StatusLine ctermfg=NONE

" -------------------------------------------------------
"  NETRW FILE BROWSER
" -------------------------------------------------------

let g:netrw_browse_split=0
let g:netrw_keepdir=1
let g:netrw_banner=1
let g:netrw_liststyle= 3
let g:netrw_fastbrowse= 2
let g:netrw_winsize=-30
let g:netrw_localcopydircmd='cp -r'

" wipeout netrw buffers when they are hidden
augroup AutoDeleteNetrwHiddenBuffers
  au!
  au FileType netrw setlocal bufhidden=wipe
augroup end

" -------------------------------------------------------
"  KEY MAPPINGS
" -------------------------------------------------------

let mapleader="\<Space>"

" open file explorer netrw
nnoremap <Leader>. <cmd>Explore<cr>

" open terminal
nnoremap <Leader>t <cmd>term<cr>

" disables search highlighting
nnoremap <Esc> <cmd>nohlsearch<cr>

" keep paste buffer after pasting in visual mode
xnoremap p "_dP

" HACK: mapping <esc> causes bizarre behaviour
nnoremap <esc>^[ <esc>^[

" save & quit
nnoremap <Leader>w <cmd>write<cr>
nnoremap <Leader>q <cmd>quit<cr>
nnoremap <Leader>n <cmd>enew <bar> startinsert<cr>

" buffer
nnoremap <Leader>bb <cmd>b#<cr>
nnoremap <Leader>bp <cmd>bp<cr>
nnoremap <Leader>bn <cmd>bn<cr>
nnoremap <Leader>bd <cmd>bp\|bd#<cr>

" UI toggles
nnoremap <Leader>ul <cmd>set list!<cr>
nnoremap <Leader>un <cmd>set number!<cr>
nnoremap <Leader>ur <cmd>set relativenumber!<cr>
nnoremap <Leader>us <cmd>set spell!<cr>
nnoremap <Leader>uw <cmd>set wrap!<cr>

" Move to window using the <ctrl> hjkl keys
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" resize windows
nnoremap <C-Left> <cmd>vertical resize -2<cr>
nnoremap <C-Right> <cmd>vertical resize +2<cr>
nnoremap <C-Up> <cmd>resize -2<cr>
nnoremap <C-Down> <cmd>resize +2<cr>

" jump and center
nnoremap <C-j> <C-d>zz
nnoremap <C-k> <C-u>zz

" better search
nnoremap * *Nzz
nnoremap # #Nzz
nnoremap n nzz
nnoremap N Nzz

" stay in visual mode after indent
vnoremap < <gv
vnoremap > >gv

" regex completion instead of whole word completion
nnoremap <leader>f :find **/*
" restrict the matching to files under the directory
" of the current file, recursively
nnoremap <leader>F <cmd>find <C-R>=expand('%:p:h').'/**/*'<cr>

